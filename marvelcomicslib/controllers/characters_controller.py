# -*- coding: utf-8 -*-

"""
    marvelcomicslib.controllers.characters_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 09/23/2016
"""

from .base_controller import *

from ..models.character import Character
from ..models.comic_data_wrapper import ComicDataWrapper
from ..models.event_data_wrapper import EventDataWrapper
from ..models.series_data_wrapper import SeriesDataWrapper
from ..models.story_data_wrapper import StoryDataWrapper
from ..models.character_data_wrapper import CharacterDataWrapper


class CharactersController(BaseController):

    """A Controller to access Endpoints in the marvelcomicslib API."""

    def __init__(self, http_client = None, http_call_back = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client, http_call_back)

    def get_character_individual(self,
                                 character_id):
        """Does a GET request to /characters/{characterId}.

        Fetches a single character by id.

        Args:
            character_id (string): A single character id.

        Returns:
            Character: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/characters/{characterId}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'characterId': character_id
        })

        # Process optional query parameters
        _query_parameters = {
            'apikey': Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'referer': Configuration.referer
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 404:
            raise APIException('404 - Character not found.', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, Character.from_dictionary)



    def get_comics_character_collection(self,
                                        character_id,
                                        collaborators = None,
                                        creators = None,
                                        date_descriptor = None,
                                        date_range = None,
                                        diamond_code = None,
                                        digital_id = None,
                                        ean = None,
                                        events = None,
                                        format = None,
                                        format_type = None,
                                        has_digital_issue = None,
                                        isbn = None,
                                        issn = None,
                                        issue_number = None,
                                        limit = None,
                                        modified_since = None,
                                        no_variants = None,
                                        offset = None,
                                        order_by = None,
                                        series = None,
                                        shared_appearances = None,
                                        start_year = None,
                                        stories = None,
                                        title = None,
                                        title_starts_with = None,
                                        upc = None):
        """Does a GET request to /characters/{characterId}/comics.

        Fetches lists of comics filtered by a character id.

        Args:
            character_id (string): A single character id.
            collaborators (string, optional): Return only comics in which the
                specified creators worked together (for example in which BOTH
                Stan Lee and Jack Kirby did work).
            creators (string, optional): Return only comics which feature work
                by the specified creators (accepts a comma-separated list of
                ids).
            date_descriptor (DateDescriptorEnum, optional): Return comics
                within a predefined date range.
            date_range (string, optional): Return comics within a predefined
                date range.  Dates must be specified as date1,date2 (e.g.
                2013-01-01,2013-01-02).  Dates are preferably formatted as
                YYYY-MM-DD but may be sent as any common date format.
            diamond_code (string, optional): Filter by diamond code.
            digital_id (string, optional): Filter by digital comic id.
            ean (string, optional): Filter by EAN.
            events (string, optional): Return only comics which take place in
                the specified events (accepts a comma-separated list of ids).
            format (string, optional): Filter by the issue format (e.g. comic,
                digital comic, hardcover). (Acceptable values are: "comic",
                "magazine", "trade paperback", "hardcover", "digest", "graphic
                novel", "digital comic", "infinite comic")
            format_type (FormatTypeEnum, optional): Filter by the issue format
                type (comic or collection).
            has_digital_issue (string, optional): Include only results which
                are available digitally. (Acceptable values are: "true")
            isbn (string, optional): Filter by ISBN.
            issn (string, optional): Filter by ISSN.
            issue_number (string, optional): Return only issues in series
                whose issue number matches the input.
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only comics which have
                been modified since the specified date.
            no_variants (string, optional): Exclude variant comics from the
                result set. (Acceptable values are: "true")
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "focDate", "onsaleDate",
                "title", "issueNumber", "modified", "-focDate", "-onsaleDate",
                "-title", "-issueNumber", "-modified")
            series (string, optional): Return only comics which are part of
                the specified series (accepts a comma-separated list of ids).
            shared_appearances (string, optional): Return only comics in which
                the specified characters appear together (for example in which
                BOTH Spider-Man and Wolverine appear).
            start_year (string, optional): Return only issues in series whose
                start year matches the input.
            stories (string, optional): Return only comics which contain the
                specified stories (accepts a comma-separated list of ids).
            title (string, optional): Return only issues in series whose title
                matches the input.
            title_starts_with (string, optional): Return only issues in series
                whose title starts with the input.
            upc (string, optional): Filter by UPC.

        Returns:
            ComicDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/characters/{characterId}/comics'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'characterId': character_id
        })

        # Process optional query parameters
        _query_parameters = {
            'collaborators': collaborators,
            'creators': creators,
            'dateDescriptor': date_descriptor,
            'dateRange': date_range,
            'diamondCode': diamond_code,
            'digitalId': digital_id,
            'ean': ean,
            'events': events,
            'format': format,
            'formatType': format_type,
            'hasDigitalIssue': has_digital_issue,
            'isbn': isbn,
            'issn': issn,
            'issueNumber': issue_number,
            'limit': limit,
            'modifiedSince': modified_since,
            'noVariants': no_variants,
            'offset': offset,
            'orderBy': order_by,
            'series': series,
            'sharedAppearances': shared_appearances,
            'startYear': start_year,
            'stories': stories,
            'title': title,
            'titleStartsWith': title_starts_with,
            'upc': upc,
            'apikey': Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'referer': Configuration.referer
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException('409 - Limit greater than 100.', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ComicDataWrapper.from_dictionary)



    def get_character_events_collection(self,
                                        character_id,
                                        comics = None,
                                        creators = None,
                                        limit = None,
                                        modified_since = None,
                                        name = None,
                                        name_starts_with = None,
                                        offset = None,
                                        order_by = None,
                                        series = None,
                                        stories = None):
        """Does a GET request to /characters/{characterId}/events.

        Fetches lists of events filtered by a character id.

        Args:
            character_id (string): A single character id.
            comics (string, optional): Return only events which take place in
                the specified comics (accepts a comma-separated list of ids).
            creators (string, optional): Return only events which feature work
                by the specified creators (accepts a comma-separated list of
                ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only events which have
                been modified since the specified date.
            name (string, optional): Filter the event list by name.
            name_starts_with (string, optional): Return events with names that
                begin with the specified string (e.g. Sp).
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "name", "startDate",
                "modified", "-name", "-startDate", "-modified")
            series (string, optional): Return only events which are part of
                the specified series (accepts a comma-separated list of ids).
            stories (string, optional): Return only events which contain the
                specified stories (accepts a comma-separated list of ids).

        Returns:
            EventDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/characters/{characterId}/events'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'characterId': character_id
        })

        # Process optional query parameters
        _query_parameters = {
            'comics': comics,
            'creators': creators,
            'limit': limit,
            'modifiedSince': modified_since,
            'name': name,
            'nameStartsWith': name_starts_with,
            'offset': offset,
            'orderBy': order_by,
            'series': series,
            'stories': stories,
            'apikey': Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'referer': Configuration.referer
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException('409 - Limit greater than 100.', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, EventDataWrapper.from_dictionary)



    def get_character_series_collection(self,
                                        character_id,
                                        comics = None,
                                        contains = None,
                                        creators = None,
                                        events = None,
                                        limit = None,
                                        modified_since = None,
                                        offset = None,
                                        order_by = None,
                                        series_type = None,
                                        start_year = None,
                                        stories = None,
                                        title = None,
                                        title_starts_with = None):
        """Does a GET request to /characters/{characterId}/series.

        Fetches lists of series filtered by a character id.

        Args:
            character_id (string): A single character id.
            comics (string, optional): Return only series which contain the
                specified comics (accepts a comma-separated list of ids).
            contains (string, optional): Return only series containing one or
                more comics with the specified format. (Acceptable values are:
                "comic", "magazine", "trade paperback", "hardcover", "digest",
                "graphic novel", "digital comic", "infinite comic")
            creators (string, optional): Return only series which feature work
                by the specified creators (accepts a comma-separated list of
                ids).
            events (string, optional): Return only series which have comics
                that take place during the specified events (accepts a
                comma-separated list of ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only series which have
                been modified since the specified date.
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "title", "modified",
                "startYear", "-title", "-modified", "-startYear")
            series_type (string, optional): Filter the series by publication
                frequency type. (Acceptable values are: "collection", "one
                shot", "limited", "ongoing")
            start_year (string, optional): Return only series matching the
                specified start year.
            stories (string, optional): Return only series which contain the
                specified stories (accepts a comma-separated list of ids).
            title (string, optional): Filter by series title.
            title_starts_with (string, optional): Return series with titles
                that begin with the specified string (e.g. Sp).

        Returns:
            SeriesDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/characters/{characterId}/series'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'characterId': character_id
        })

        # Process optional query parameters
        _query_parameters = {
            'comics': comics,
            'contains': contains,
            'creators': creators,
            'events': events,
            'limit': limit,
            'modifiedSince': modified_since,
            'offset': offset,
            'orderBy': order_by,
            'seriesType': series_type,
            'startYear': start_year,
            'stories': stories,
            'title': title,
            'titleStartsWith': title_starts_with,
            'apikey': Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'referer': Configuration.referer
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException('409 - Limit greater than 100.', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, SeriesDataWrapper.from_dictionary)



    def get_character_story_collection(self,
                                       character_id,
                                       comics = None,
                                       creators = None,
                                       events = None,
                                       limit = None,
                                       modified_since = None,
                                       offset = None,
                                       order_by = None,
                                       series = None):
        """Does a GET request to /characters/{characterId}/stories.

        Fetches lists of stories filtered by a character id.

        Args:
            character_id (string): A single character id.
            comics (string, optional): Return only stories contained in the
                specified (accepts a comma-separated list of ids).
            creators (string, optional): Return only stories which feature
                work by the specified creators (accepts a comma-separated list
                of ids).
            events (string, optional): Return only stories which take place
                during the specified events (accepts a comma-separated list of
                ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only stories which have
                been modified since the specified date.
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "id", "modified", "-id",
                "-modified")
            series (string, optional): Return only stories contained the
                specified series (accepts a comma-separated list of ids).

        Returns:
            StoryDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/characters/{characterId}/stories'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'characterId': character_id
        })

        # Process optional query parameters
        _query_parameters = {
            'comics': comics,
            'creators': creators,
            'events': events,
            'limit': limit,
            'modifiedSince': modified_since,
            'offset': offset,
            'orderBy': order_by,
            'series': series,
            'apikey': Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'referer': Configuration.referer
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException('409 - Limit greater than 100.', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, StoryDataWrapper.from_dictionary)



    def get_character_collection(self,
                                 comics = None,
                                 events = None,
                                 limit = None,
                                 modified_since = None,
                                 name = None,
                                 name_starts_with = None,
                                 offset = None,
                                 order_by = None,
                                 series = None,
                                 stories = None):
        """Does a GET request to /characters.

        Fetches lists of characters.

        Args:
            comics (string, optional): Return only characters which appear in
                the specified comics (accepts a comma-separated list of ids).
            events (string, optional): Return only characters which appear in
                the specified events (accepts a comma-separated list of ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only characters which
                have been modified since the specified date.
            name (string, optional): Return only characters matching the
                specified full character name (e.g. Spider-Man).
            name_starts_with (string, optional): Return characters with names
                that begin with the specified string (e.g. Sp).
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "name", "modified",
                "-name", "-modified")
            series (string, optional): Return only characters which appear the
                specified series (accepts a comma-separated list of ids).
            stories (string, optional): Return only characters which appear
                the specified stories (accepts a comma-separated list of
                ids).

        Returns:
            CharacterDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/characters'

        # Process optional query parameters
        _query_parameters = {
            'comics': comics,
            'events': events,
            'limit': limit,
            'modifiedSince': modified_since,
            'name': name,
            'nameStartsWith': name_starts_with,
            'offset': offset,
            'orderBy': order_by,
            'series': series,
            'stories': stories,
            'apikey': Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'referer': Configuration.referer
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException('409 - Limit greater than 100.', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, CharacterDataWrapper.from_dictionary)


